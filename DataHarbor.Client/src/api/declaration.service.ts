/**
 * DataHarbor.WebAPI
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { Declaration } from '../model/declaration';
import { ProcessStatus } from '../model/processStatus';
import { ProcessingLogEntry } from '../model/processingLogEntry';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class DeclarationService {

    protected basePath = '/';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiDeclarationAllGet(observe?: 'body', reportProgress?: boolean): Observable<Array<Declaration>>;
    public apiDeclarationAllGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Declaration>>>;
    public apiDeclarationAllGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Declaration>>>;
    public apiDeclarationAllGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (Keycloak) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Declaration>>('get',`${this.basePath}/api/declaration/all`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param files 
     * @param uniqueId 
     * @param name 
     * @param description 
     * @param status 
     * @param recieveDate 
     * @param rawData 
     * @param transactions 
     * @param processingLogs 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiDeclarationCreatePostForm(files?: Array<Blob>, uniqueId?: string, name?: string, description?: string, status?: ProcessStatus, recieveDate?: Date, rawData?: Array<{ [key: string]: string; }>, transactions?: Array<{ [key: string]: string; }>, processingLogs?: Array<ProcessingLogEntry>, observe?: 'body', reportProgress?: boolean): Observable<Declaration>;
    public apiDeclarationCreatePostForm(files?: Array<Blob>, uniqueId?: string, name?: string, description?: string, status?: ProcessStatus, recieveDate?: Date, rawData?: Array<{ [key: string]: string; }>, transactions?: Array<{ [key: string]: string; }>, processingLogs?: Array<ProcessingLogEntry>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Declaration>>;
    public apiDeclarationCreatePostForm(files?: Array<Blob>, uniqueId?: string, name?: string, description?: string, status?: ProcessStatus, recieveDate?: Date, rawData?: Array<{ [key: string]: string; }>, transactions?: Array<{ [key: string]: string; }>, processingLogs?: Array<ProcessingLogEntry>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Declaration>>;
    public apiDeclarationCreatePostForm(files?: Array<Blob>, uniqueId?: string, name?: string, description?: string, status?: ProcessStatus, recieveDate?: Date, rawData?: Array<{ [key: string]: string; }>, transactions?: Array<{ [key: string]: string; }>, processingLogs?: Array<ProcessingLogEntry>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {










        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (uniqueId !== undefined && uniqueId !== null) {
            queryParameters = queryParameters.set('UniqueId', <any>uniqueId);
        }
        if (name !== undefined && name !== null) {
            queryParameters = queryParameters.set('Name', <any>name);
        }
        if (description !== undefined && description !== null) {
            queryParameters = queryParameters.set('Description', <any>description);
        }
        if (status !== undefined && status !== null) {
            queryParameters = queryParameters.set('Status', <any>status);
        }
        if (recieveDate !== undefined && recieveDate !== null) {
            queryParameters = queryParameters.set('RecieveDate', <any>recieveDate.toISOString());
        }
        if (rawData) {
            rawData.forEach((element) => {
                queryParameters = queryParameters.append('RawData', <any>element);
            })
        }
        if (transactions) {
            transactions.forEach((element) => {
                queryParameters = queryParameters.append('Transactions', <any>element);
            })
        }
        if (processingLogs) {
            processingLogs.forEach((element) => {
                queryParameters = queryParameters.append('ProcessingLogs', <any>element);
            })
        }

        let headers = this.defaultHeaders;

        // authentication (Keycloak) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (files) {
            files.forEach((element) => {
                formParams = formParams.append('Files', <any>element) as any || formParams;
            })
        }

        return this.httpClient.request<Declaration>('post',`${this.basePath}/api/declaration/create`,
            {
                body: convertFormParamsToString ? formParams.toString() : formParams,
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiDeclarationIdDelete(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public apiDeclarationIdDelete(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public apiDeclarationIdDelete(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public apiDeclarationIdDelete(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling apiDeclarationIdDelete.');
        }

        let headers = this.defaultHeaders;

        // authentication (Keycloak) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('delete',`${this.basePath}/api/declaration/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiDeclarationIdGet(id: string, observe?: 'body', reportProgress?: boolean): Observable<Declaration>;
    public apiDeclarationIdGet(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Declaration>>;
    public apiDeclarationIdGet(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Declaration>>;
    public apiDeclarationIdGet(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling apiDeclarationIdGet.');
        }

        let headers = this.defaultHeaders;

        // authentication (Keycloak) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Declaration>('get',`${this.basePath}/api/declaration/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiDeclarationUpdatePut(body?: Declaration, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public apiDeclarationUpdatePut(body?: Declaration, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public apiDeclarationUpdatePut(body?: Declaration, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public apiDeclarationUpdatePut(body?: Declaration, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (Keycloak) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('put',`${this.basePath}/api/declaration/update`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
